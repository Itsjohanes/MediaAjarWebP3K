var textForPages = ["Pemrograman Berbasis                        Teks, Grafis, dan                       Multimedia              Object \& Class                                    Johannes Alexander Putra","Materi Bagian 1                          •        Pendahuluan                    •        Class \& Object                     •        Constructor","Bagian 1                                                  Pendahuluan","Paradigma                                              Pemrograman                                                         Berorientasi                 Object                    Apa itu OOP? OOP atau (Object-Oriented Programming) adalah suatu paradigma                dalam pemrograman yang berbasis pada obyek. OOP terinsiprasi dari model yang                 telah ada di kehidupan sehari-hari. Contoh saja seperti mobil, mobil merupakan                suatu objek. Mobil terbentuk dari beberapa objek yang lebih kecil seperti roda, body,                mesin dll. Objek yang terdapat pada mobil saling berhubungan, berinteraksi dan                 berkomunikasi. Melalui konsep di atas, OOP diciptakan untuk mempermudah                pengembangan program dengan cara mengikuti pendekatan model objek yang telah                ada dikehidupan sehari-hari.","Pemrograman Prosedural vs Pemrograman                 OOP                    Pemrograman                                   Prosedural                            adalah                    pemrograman                                   yang                  membagi-bagi                                proses                  yang                dilakukan                      program                      menjadi                  prosedur-prosedur atau fungsi-fungsi.                   Pemrograman Berorientasi Objek membagi kode program                  menjadi kelas-kelas yang dibuat berdasarkan objek yang                  terlibat dalam pengembangan program. Prosedur dan Fungsi                  dalam pemrograman OOP dinamakan method.","Ilustrasi Peminjaman VCD (Sukamto, 2010)","Syarat umum Bahasa yang mendukung OOP                         •        Mendukung Enkapsulasi                    •        Mendukung Inheritance                     •        Mendukung Polimorfisme                            Java mendukung ketiganya","Bagian 2                                                  Class dan Object","Class \& Object                                                                Sebuah objek memiliki keadaan dan perilaku. Status mendefinisikan objek,                            dan perilaku mendefinisikan apa yang dilakukan objek.","Class                       •        Class merupakan bagian dari turunan obyek yang berfungsi sebagai wadah atau cetakan untuk                           mendeskripsikan behavior/state yang didukung obyeknya. Behavior adalah tingkah laku yang dapat                        dilakukan oleh obyek. Behavior adalah kelakuan atau sifat dari obyek, misalnya lampu bisa dimatikan atau                         dinyalakan. State adalah kondisi atau keadaan yang bisa terjadi pada obyek misalnya lampu dapat memiliki state                         nyala atau mati.               •        Di kehidupan nyata kita mungkin sering menemukan banyak obyek, akan tetapi beberapa di antaranya memiliki                          kemiripan. Mungkin ada banyak kucing yang ada di dunia ini. Semua sama-sama memiliki bentuk yang sama.                        Bila diperhatikan ada banyak jenis kucing, mulai dari warna, bentuk hingga ras. Dalam aturan orientasi obyek,                         dapat dikatakan bahwa jenis, warna dan ras kucing di seluruh belahan dunia ini adalah sebuah kelas                         instance dari obyek yang dikenali sebagai kucing.","Jadi Class itu..                        •        Class adalah konstruksi yang mendefinisikan objek dari tipe yang sama.                  •        Class Java menggunakan variabel/properti/atribut untuk mendefinisikan                           bidang data dan method untuk mendefinisikan perilaku.                 •        Selain itu, kelas menyediakan jenis methods khusus, yang dikenal                           sebagai constructors, yang dipanggil untuk membangun objek dari                          kelas.","Class (Lanjut)","Class (Lanjut)","Atribut/Variabel/Properti/Data Field                          •        Keadaan suatu objek                                                   (juga dikenal                                sebagai atribut,                            variabel, properti, atau data field) diwakili oleh bidang                           data dengan nilainya saat ini.                    •        Objek                    lingkaran                         yang                  berasal dari                                class circle,                            misalnya, atribut, variabel, properti, atau data field yaitu                            radius dengan tipe data double bernilai 1","Perilaku/Methods                        •        Perilaku            suatu objek (juga dikenal                                   sebagai tindakannya) didefinisikan oleh                          method. Untuk memanggil method pada suatu objek                                                                   adalah meminta objek                          untuk melakukan suatu tindakan.                •        Misalnya,                Anda             dapat            mendefinisikan method bernama getArea() dan                          getPerimeter() untuk                             objek lingkaran. Objek                                lingkaran dapat memanggil                          getArea() untuk                            mengembalikan areanya                                    dan               getPerimeter() untuk                         mengembalikan perimeternya. Anda                                                     juga             dapat menentukan metode                         setRadius(radius). Objek lingkaran dapat memanggil metode ini untukmengubah                          radiusnya.","Mendeklarasikan Variabel Referensi Object                        •         Untuk mereferensikan object, tetapkan object ke variable                            referensi.                   •        Untuk mendeklarasikan variabel referensi, gunakan sintaks:                    ClassName objectRefVar;                   •        Contoh:                    Circle myCircle;","Mendeklarasikan / Membuat Object dalam                 Satu Langkah","Bagian 3                                                  Constructor","Constructors                          •        Konstruktor adalah jenis metode khusus yang dipanggil                            untuk membangun objek.","Constructors (Lanjutan)                        •        Constructor tanpa parameter disebut sebagai konstruktor no-arg                  •        Constructor harus memiliki nama yang sama dengan Class itu sendiri.                  •        Constructor tidak memiliki nilai kembalian (return) bahkan tidak ada                           void                 •         Constructor dipanggil                                 menggunakan operator baru                                             ketika             sebuah                           objek dibuat. Constructor memainkan peran menginisialisasi objek.","Default Constructors                         •        Sebuah Class dapat didefinisikan tanpa Constructor.                    •        Dalam hal ini, konstruktor no-arg dengan tubuh kosong                    didefinisikan secara implisit di dalam Class.                   •        Constructor ini, disebut konstruktor default, disediakan                   secara otomatis hanya jika tidak ada Constructors yang                   didefinisikan secara eksplisit di dalam kelas.","Membuat                                                        Object                                               Menggunakan                Constructors","Bagian 4                                                  Class \& Objek Bagian 2","Materi Bagian 2                          •        Modifier                    •        Encapsulation                     •        This Reference","Bagian 4                                                  Modifier","Access Modifiers                          Access modifier adalah kemampuan membuat class, field,                   method dan constructor dapat diakses darimana saja","Access Modifiers                          •        Access modifiers berlaku kepada                                                                                class, attributes,                            methods and constructors.","Access Modifiers (Lanjutan)","Access Modifiers Attributes, Methods dan                 Constructors","Access Modifiers Attributes, Methods dan                 Constructors (Lanjutan)","Access Modifiers Attributes, Methods dan                 Constructors (Lanjutan)","Non-Access Modifiers                          •        Non-Access modifiers berlaku kepada class, attributes,                            dan methods.","Non-Access Modifiers Class","Non-Access Modifiers Class (Lanjutan)","Non-Access Modifiers Attributes, Methods","Non-Access Modifiers Attributes, Methods                 (Lanjutan)","Bagian 4                                                  Encapsulation","Encapsulation                         Arti Encapsulation, adalah untuk memastikan bahwa data \"sensitif\" disembunyikan dari                  pengguna. Untuk melakukan Encapsulation terdapat langkah - langkah yang dilakukan                 antara lain:                 • Mendeklarasikan variabel/atribut Class dengan access modifiers private.                  • Menyediakan method get dan set dengan access modifiers public untuk                 mengakses dan memperbarui nilai variabel/atribut Class yang memiliki access                 modifiers private.","Get dan Set                        •        Sudah dijelaskan di slide sebelumnya bahwa variabel/atribut Class                           dengan access modifiers private hanya dapat diakses dalam Class                          yang sama (Class luar tidak memiliki akses ke variabel/atribut Class                          tersebut).                 •        Namun,                    dimungkinkan                        untuk                mengaksesnya                           jika          disediakan                           method dengan access modifiers public .                 •        Method                get mengembalikan                                 nilai         variabel,                  dan               method                set                          menetapkan nilai.","Get dan Set (Lanjutan)                          •        intaks untuk keduanya adalah dimulai dengan get atau                            set, diikuti dengan nama variabel, dengan huruf                             pertama dalam huruf besar","Get dan Set (Lanjutan)                        •        Metode get mengembalikan nilai dari nama variabel.                 •        Metode set mengambil parameter (newName) dan menetapkannya ke variabel name. Keyword this                           digunakan untuk merujuk ke object saat ini.               •        Namun, karena variabel name dengan access modifiers private, maka tidak dapat diaksesnya dari                           luar kelas Main","Get dan Set (Lanjutan)                          •        Sebagai gantinya, gunakan metode getName() dan                            setName() untuk mengakses dan memperbarui variable                             name:","Mengapa                                                         Harus                                               Menggunakan                 Encapsulation                     •        Kendali yang lebih baik dari atribut dan method dari suatu Class                  •        Atribut Class dapat dibuat read-only (jika hanya menggunakan                           metodeget), atau write-only (jika Anda hanya menggunakan                          metode set)                  •        Fleksibel: programmer dapat mengubah satu bagian dari kode                           tanpa mempengaruhi bagian lain (To make code easy to maintain)                  •         Peningkatan keamanan data","Bagian 5                                                  This Reference","This Reference                       •        Keyword this mengacu pada objek                     itu sendiri. Itu juga dapat digunakan di dalam konstruktor untuk                             memanggil                          constructor lain dari kelas yang sama.              •        Keyword this berlaku pada constructor dan method                •        Penggunaan paling umum dari kata kunci this adalah untuk menghilangkan kebingungan antara atribut kelas dan                          parameter dengan nama yang sama (karena atribut kelas dibayangi oleh method atau parameter constructor).              •        Keyword this juga dapat digunakan untuk:                  –    Panggil konstruktor kelas saat ini                –    Panggil metode kelas saat ini                –    Kembalikan objek kelas saat ini                –    Berikan argumen dalam pemanggilan metode                –    Berikan argumen dalam panggilan konstruktor","Contoh This Keyword","Referensi                       •        Liang. (2015). Introduction to Java Programming Comprehensive Version 10 Edition. Pearson                •        Cay S. Horstmann. (2013). Big Java: Early Objects 5th edition. Willey.                •        Sommerville, I. (2003). Rekayasa Perangkat Lunak Edisi 6 Jilid 1. Jakarta : Erlangga                •        Sommerville, I.(2003). Rekayasa Perangkat Lunak Edisi 6 Jilid 2. Jakarta : Erlangga                •        Walter J. Savitch \& Kenrick Mock. (2012). Absolute Java 5 edition. Addison Wesley                                                                                                    th              •        Sukamto, R.A. (2018). Logika Algoritma dan Pemrograman Dasar. Bandung : Modula                •        Sukamto, R.A. \& Shalahudin (2010). Pemrograman Berorientasi Objek dengan Bahasa Pemrograman C++, Java, PHP.                          Bandung : Modula              •        Sukamto, R.A \& Shalahuddin. (2018). Rekayasa Perangkat Lunak Terstruktur dan Berorientasi Objek. Bandung :                          Informatika"];