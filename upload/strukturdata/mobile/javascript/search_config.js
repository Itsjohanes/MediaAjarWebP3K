var textForPages = ["Pemrograman Berbasis Teks                        Grafis dan Multimedia               Abstract Class,                  Interface \&                   Struktur Data                          Johannes Alexander Putra","Materi                          •        Pendahuluan                    •        Abstract Class                     •        Interface                    •        Struktur Data","Bahasan 1                                                  Pendahuluan","Pendahuluan                          •        Superclass                             mendefinisikan                                    perilaku                      umum                     untuk                            subclass terkait. Antarmuka (interface) dapat digunakan                             untuk mendefinisikan perilaku umum untuk kelas                            (termasuk kelas yang tidak terkait)","Bagian 2                                                  Abstract Class","Abstract Class                          •         Class abstract tidak dapat digunakan untuk membuat                            objek.                     •         Class abstract dapat berisi metode abstrak, yang                            diimplementasikan dalam subclass secara konkret","Abstract Classes dan Abstract Method","Abstract Classes dan Abstract Method                         •        Abstract method                                       tidak                dapat                  dimuat dalam                                    kelas                           nonabstract.                           Jika               subclass                      dari               superclass abstract                           tidak mengimplementasikan semua                                                                             method                       abstract,                           subclass harus                                   didefinisikan abstract.                                               Dengan                        kata                           lain,            dalam subclass nonbstract yang diperluas dari class                           bstract, semua method abstract harus diimplementasikan,                           bahkan jika tidakdigunakan dalam subclass.","Object Tidak Dapat Dibuat di Class Abstract                         •        Abstract Class tidak dapat diinstansiasi menggunakan                            operator new, tetapi Anda masih dapat mendefinisikan                           konstruktornya, yang dipanggil                                                                           dalam konstruktor                            subkelasnya. Misalnya,                                                                                                          konstruktor                            GeometricObjectdipanggil di class                                                                             Circle dan class                           Rectangle.","Abstract Class Without Abstract Method                          •        Class yang berisi method abstract harus abstract. Namun,                            dimungkinkan                               untuk                   mendefinisikan                                 Class                    abstract                           yang tidak berisi methode abstract. Dalam hal ini, Anda                            tidak dapat membuat instance class                                                                                        menggunakan                            operator new. Class ini digunakan sebagai Class dasar                            untuk mendefinisikansubkelas baru.","Superclass dari Abstract Class bisa saja                 Konkrit                     •        Subclass bisa saja abstrak meskipun superclassnya                            adalah konkrit. Misalnya class Object adalah konkret                             tetapi subclassnya seperti GeometricObject mungkin                            abstract","Concrete Method Overriden to be Abstract                         •        A          subclass                        can                  override                      a          method from                                      its                            superclass to define it abstract. Ini jarang terjadi, tetapi                             berguna ketika                                        implementasi metode                                                 di superclass                            menjadi tidak valid di subclass. Dalam halini, subclass                            harus didefinisikan abstract.","Contoh                          •        Java Abstraction (w3schools.com)","Bagian 3                                                  Interface","Interface                        •        Cara lain untuk mencapai abstraksi di Java, adalah dengan Interfaces.                           Interfaces adalah “abstract class\" sepenuhnya yang digunakan untuk                          mengelompokkan metode terkait dengan empty bodies.                 •        Untuk                 mengakses                          metode                     interfaces,                     interfaces                     harus                           \"diimplementasikan\" (seperti yang diwarisi) oleh kelas lain dengan                          kata           kunci implements (bukan extends). Tubuh method interfaces                         disediakan oleh class \"implements\":","Interface (Lanjutan)                               • Seperti class abstract, interface tidak dapat digunakan untuk                      membuat object.                     • Metode interfaces tidak memiliki badan - badan disediakan oleh                      kelas \"implement“.                     • Pada implementasi interfaces, Anda harus mengganti semua                      metodenya.                      • Metode interfaces secara default abstract dan public.                     • Atribut interfaces secara default adalah public, static, dan final.                      •Interfaces tidak dapat berisi constructor (karena tidak dapat                     digunakan untuk membuat                      object);","Why And When To Use Interfaces?                         •        Untuk               mencapai                     keamanan -                          sembunyikan detail                                       tertentu                           danhanya tampilkan detail penting dari suatu objek (interface).                  •        Java tidak                       mendukung \"multiple                                        inheritance\" (sebuah kelas                            hanya dapat mewarisi dari satu superclass). Namun, itu dapat                          dicapai dengan                                   interface,                          karena                         class                          dapat                           mengimplementasikan                                           banyak                   interface.                    Catatan:                     Untuk                           mengimplementasikan beberapainterface, pisahkan dengan koma.","Example                          •        https://www.w3schools.com/java/java_interface.asp","Bagian 4                                                  Abstract Classes vs Interfaces","Interfaces vs. Abstract Classes                        •        Dalam sebuah interfaces, data harus berupa konstanta; abstract class dapat memiliki semua jenis                          data.                •        Setiap method dalam interfaces hanya signature tanpa implementasi; abstract class dapat memiliki                           metode konkret.","Bagian 4                                                  Struktur Data Java","Struktur Data                         Sebuah bagian dalam ilmu pemrograman dasar di mana bertujuan untuk                 membuat sebuah struktur penyimpanan data yang digunakan saat program                 dijalankan. Struktur data berbeda dengan basis data.                  Basis data merupakan ilmu untuk mengakses dan memelihara data yang                 disimpan dalam storage misal harddisk sedangkan Struktur data berada                 pada level pemrograman dimana merupakan tempat penyimpanan data                yang digunakan oleh program terkait dengan lokasinya di memori (bukan                 storage/hard disk)","Manfaat Struktur Data                          •        Struktur data dibuat agar cara mempresentasikan data                            dalam membuat program dapat dilakukan secara efisien                             dalam                    pengolahan                               di           memori                       dan                pengolahan                            penyimpanan dari program ke storage jiga lebih mudah                            dilakukan. Contoh yang sering anda gunakan: Array.","Beberapa Struktur data yang akan kita                 bahas                      •        Java ArrayList                    •        Java LinkedList","Java ArrayList                         •        The ArrayList class is a resizable array, which can be found in the                           java.util package.                  •        The difference between a built-in array and an ArrayList in Javais                            that the size of an array cannot be modified (if you want to add or                          remove elements to/from an array, you have to create a new one).                           While elements can be added and removed from an ArrayList                           whenever you want. The syntax is also slightly different:","Example                          •        Create an ArrayList Object called cars that will store                            strings.","Method yang akan dipelajari                         •        add (menambahkan)                   •        get (mendapatkan)                   •        set (mengubah)                   •        remove (menghapus)                   •        clear (menghapus semua)                   •        size (mengetahui ukuran)","Add Item                          •        The ArrayList class has many useful methods. For                            example, to add elements to the ArrayList, use the add()                             method:","Access an Item                          •        To access an element in the ArrayList, use the get()                            method and refer to the index number:","Change an Item                          •        To modify an element, use the set() method and refer to                            the index number:","Remove an Item                         •        To remove an element, use the remove() method and refer to the index                           number:                        •        To remove all elements in arraylist, you can use clear() method","ArrayList Size                          •        To find out how many elements an ArrayList have, use                            the size method:","Loop Through an ArrayList                          •        Loop through the elements of an ArrayList with a for                            loop, and use the size() method to specify how many                             times the loop should run:","Loop Through an ArrayList                          •        You can also loop through an ArrayList with the for-each                            loop:","Other Types                       •        Elements in an ArrayList are actually objects. In the examples above, we created elements (objects) of type                           \"String\". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you                        must specify an equivalent wrapper class: Integer. For other primitive types, use: Boolean for boolean, Character                         for char, Double for double, etc:               •        Create an ArrayList to store numbers (add elements of type Integer):","Sort an ArrayList                        •        Another useful class in the java.util package is the Collections class, which include the                           sort() method for sorting lists alphabetically or numerically:                •        Sort an ArrayList of Strings:","Java LinkedList                        •        In the previous chapter, you learned about the ArrayList class. The LinkedList class is                           almost identical to the ArrayList:","ArrayList vs. LinkedList                        •        The LinkedList class is a collection which can contain many objects of                           the same type, just like the ArrayList.                 •        The LinkedList class has all of the same methods as the ArrayList class                           because they both implement the List interface. This means that you                          can add items, change items, remove items and clear the list in the                          same way.                 •        However, while the ArrayList class and the LinkedList class can be used                          in the same way, they are built very differently.","How the ArrayList works                          •        The ArrayList class has a regular array inside it. When                            an element is added, it is placed into the array. If the                             array is not big enough, a new, larger array is created to                            replace the old one and the old one is removed.","How the LinkedList works                          •        The LinkedList stores its items in \"containers.\" The list                            has a link to the first container and each container has a                           link to the next container in the list. To add an element to                            the list, the element is placed into a new container and                            that container is linked to one of the other containers in                           the list.","Gambaran ArrayList Vs LinkedList","When To Use                          •        Use an ArrayList for storing and accessing data, and                            LinkedList to manipulate data.","LinkedList Methods                        •        For many cases, the ArrayList is more efficient as it is common to need access to random items in                          the list, but the LinkedList provides several methods to do certain operations more efficiently:","addFirst                                                               import java.util.LinkedList;                                                      public class Main {                                                      public static void main(String[] args) {                                                        LinkedList<String> cars = new LinkedList<String>();                                                       cars.add(\"Volvo\");                                                        cars.add(\"BMW\");                                                        cars.add(\"Ford\");                                                          // Use addFirst() to add the item to the beginning                                                        cars.addFirst(\"Mazda\");                                                       System.out.println(cars);                                                      }                                                    }","addLast                                                             import java.util.LinkedList;                                                     public class Main {                                                     public static void main(String[] args) {                                                       LinkedList<String> cars = new LinkedList<String>();                                                      cars.add(\"Volvo\");                                                       cars.add(\"BMW\");                                                       cars.add(\"Ford\");                                                         // Use addLast() to add the item to the end                                                       cars.addLast(\"Mazda\");                                                       System.out.println(cars);                                                    }                                                   }","removeFirst()                                                             import java.util.LinkedList;                                                      public class Main {                                                      public static void main(String[] args) {                                                       LinkedList<String> cars = new LinkedList<String>();                                                        cars.add(\"Volvo\");                                                        cars.add(\"BMW\");                                                        cars.add(\"Ford\");                                                       cars.add(\"Mazda\");                                                           // Use removeFirst() remove the first item from the list                                                        cars.removeFirst();                                                       System.out.println(cars);                                                      }                                                    }","removeLast                                                              import java.util.LinkedList;                                                      public class Main {                                                      public static void main(String[] args) {                                                       LinkedList<String> cars = new LinkedList<String>();                                                        cars.add(\"Volvo\");                                                        cars.add(\"BMW\");                                                        cars.add(\"Ford\");                                                       cars.add(\"Mazda\");                                                           // Use removeLast() remove the last item from the list                                                        cars.removeLast();                                                       System.out.println(cars);                                                      }                                                    }","getFirst                                                               import java.util.LinkedList;                                                       public class Main {                                                       public static void main(String[] args) {                                                         LinkedList<String> cars = new                                                    LinkedList<String>();                                                         cars.add(\"Volvo\");                                                         cars.add(\"BMW\");                                                         cars.add(\"Ford\");                                                         cars.add(\"Mazda\");                                                            // Use getFirst() to display the first item in the list                                                         System.out.println(cars.getFirst());                                                       }                                                    }","getLast                                                               import java.util.LinkedList;                                                       public class Main {                                                       public static void main(String[] args) {                                                         LinkedList<String> cars = new                                                    LinkedList<String>();                                                         cars.add(\"Volvo\");                                                         cars.add(\"BMW\");                                                         cars.add(\"Ford\");                                                         cars.add(\"Mazda\");                                                            // Use getLast() to display the last item in the list                                                         System.out.println(cars.getLast());                                                       }                                                    }","Java Iterator                          •        An Iterator is an object that can be used to loop through                            collections, like ArrayList and HashSet. It is called an                           \"iterator“ because \"iterating\" is the technical term for                            looping.                    •        To use an Iterator, you must import it from the java.util                            package.","Example                          •        The iterator() method can be used to get an Iterator for                            any collection:","Looping Through a Collection","Removing Items from a Collection","Java Hashmap                          •        In the ArrayList chapter, you learned that Arrays store                            items as an ordered collection, and you have to access                             them with an index number (int type). A HashMap                            however, store items in \"key/value\" pairs, and you can                            access them by an index of another type (e.g. a String).","Java Hashmap                          •        import java.util.HashMap; // import the HashMap class                    •        HashMap<String,                                            String>                        capitalCities                               =             new                             HashMap<String, String>();","Add Items","Access an Items                          •        capitalCities.get(\"England\");","Remove an Item                          •        capitalCities.remove(\"England\");","Remove All                          •        capitalCities.clear();","Hashmap Size                          •        capitalCities.size();","Loop Through a Hashmap                         for (String i : capitalCities.keySet()) {                      System.out.println(i);                   }                   for (String i : capitalCities.values()) {                      System.out.println(i);                   }","Perlu Diperhatikan                          •        HashMap tidak dimaksudkan untuk menyimpan entri dalam                            urutan yang diurutkan , tetapi jika Anda harus mengurutkan                           HashMap berdasarkan kunci atau nilai, Anda dapat                            melakukannya di Java. Mengurutkan HashMap pada kunci                            cukup mudah, yang perlu Anda lakukan hanyalah membuat                            TreeMap dengan menyalin entri dari HashMap","Hashset                          •        A HashSet is a collection of items where every item is                            unique, and it is found in the java.util package:                     import java.util.HashSet; // Import the HashSet class                    HashSet<String> cars = new HashSet<String>();","Add Items","Check if an Item Exist                          •        cars.contains(\"Mazda\");","Remove an Item                          •        cars.remove(\"Volvo\");","Remove All                          •        cars.clear();","Referensi                        •        Liang. (2015). Introduction to Java Programming Comprehensive Version 10 Edition.                          Pearson                •        Cay S. Horstmann. (2013). Big Java: Early Objects 5th edition. Willey.                 •        Walter J. Savitch \& Kenrick Mock. (2012). Absolute Java 5 edition. Addison Wesley                                                                                                                              th                •        Sukamto, R.A. (2018). Logika Algoritma dan Pemrograman Dasar. Bandung : Modula                 •        Sukamto, R.A. (2018). Struktur Data Terapan Dalam Berbagai Bahasa Pemrograman:                          Pascal, C, C++,.dan Java. Bandung : Modula                •        https://www.w3schools.com/"];